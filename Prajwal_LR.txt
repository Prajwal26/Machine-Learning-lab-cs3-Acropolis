{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.3"
    },
    "colab": {
      "name": "Prajwal  LR.ipynb",
      "provenance": [],
      "collapsed_sections": []
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "JJM8ymxD96uR",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        " class MyLinearRegression:\n",
        "    def __init__(self, weight= 0.01  , bias= 0.005   , learning_rate=  0.007  ,\n",
        "                 iterations= 25   ):\n",
        "        self.weight = weight\n",
        "        self.bias = bias\n",
        "        self.learning_rate = learning_rate\n",
        "        self.iterations = iterations\n",
        "        self.cost_trend = []\n",
        "        self.cost = 0\n",
        "\n",
        "    def predict(self, x):\n",
        "        predicted_set = []\n",
        "        for i in range(len(x)):\n",
        "            predicted_value = self.weight * x[i] + self.bias\n",
        "            predicted_set.append(predicted_value)\n",
        "        return predicted_set\n",
        "\n",
        "    def cost_function(self, x, y):\n",
        "        count = len(x)\n",
        "        total_error = 0.0\n",
        "        for i in range(count):\n",
        "            total_error += (y[i] - (self.weight * x[i] +\n",
        "                            self.bias)) ** 2\n",
        "        return float(total_error) / (2 * count)\n",
        "\n",
        "    def update_weights(self, x, y):\n",
        "        weight_deriv = 0\n",
        "        bias_deriv = 0\n",
        "        count = len(x)\n",
        "\n",
        "        for i in range(count):\n",
        "            # Calculate partial derivatives\n",
        "            # -2x(y - (mx + b))\n",
        "            weight_deriv += -2 * x[i] * (y[i] -(self.weight * x[i] + self.bias))\n",
        "\n",
        "            # -2(y - (mx + b))\n",
        "            bias_deriv += -2 * (y[i] - (self.weight * x[i] +\n",
        "                                self.bias))\n",
        "\n",
        "        # We subtract because the derivatives point in direction of steepest\n",
        "        # ascent\n",
        "        self.weight -= (weight_deriv / count) * self.learning_rate\n",
        "        self.bias -= (bias_deriv / count) * self.learning_rate\n",
        "\n",
        "    def train(self, x, y):\n",
        "        for i in range(self.iterations):\n",
        "            self.update_weights(x, y)\n",
        "            # Calculating cost\n",
        "            self.cost = self.cost_function(x, y)\n",
        "            self.cost_trend.append(self.cost)\n",
        "           # if i % 10000 == 0:\n",
        "            print(\"Iteration: {}\\t Weight: {}\\t Bias: {}\\t Cost: {}\".format(i, self.weight, self.bias, self.cost))"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XGMUmPfj96ua",
        "colab_type": "code",
        "outputId": "28e63fb1-d088-4f47-f288-e7be49c0db77",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 824
        }
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "# intialise data of lists. \n",
        "data = {'Hours':[2.5,5.1,3.2,8.5,3.5,1.5,9.2,5.5,8.3,2.7,7.7,5.9,4.5,3.3,1.1,8.9,2.5,1.9,6.1,7.4,2.7,4.8,3.8,6.9,7.8], \n",
        "        'Scores':[21,47,27,75,30,20,88,60,81,25,85,62,41,42,17,95,30,24,67,69,30,54,35,76,86]} \n",
        "  \n",
        "# Create DataFrame \n",
        "studentscores = pd.DataFrame(data) \n",
        "  \n",
        "# Print the output. \n",
        "studentscores "
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Hours</th>\n",
              "      <th>Scores</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2.5</td>\n",
              "      <td>21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5.1</td>\n",
              "      <td>47</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3.2</td>\n",
              "      <td>27</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>8.5</td>\n",
              "      <td>75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3.5</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>1.5</td>\n",
              "      <td>20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>9.2</td>\n",
              "      <td>88</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>5.5</td>\n",
              "      <td>60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>8.3</td>\n",
              "      <td>81</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>2.7</td>\n",
              "      <td>25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>7.7</td>\n",
              "      <td>85</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>5.9</td>\n",
              "      <td>62</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>4.5</td>\n",
              "      <td>41</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>3.3</td>\n",
              "      <td>42</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>1.1</td>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>8.9</td>\n",
              "      <td>95</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>2.5</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>1.9</td>\n",
              "      <td>24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>6.1</td>\n",
              "      <td>67</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>7.4</td>\n",
              "      <td>69</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>2.7</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>4.8</td>\n",
              "      <td>54</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>3.8</td>\n",
              "      <td>35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>6.9</td>\n",
              "      <td>76</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>7.8</td>\n",
              "      <td>86</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    Hours  Scores\n",
              "0     2.5      21\n",
              "1     5.1      47\n",
              "2     3.2      27\n",
              "3     8.5      75\n",
              "4     3.5      30\n",
              "5     1.5      20\n",
              "6     9.2      88\n",
              "7     5.5      60\n",
              "8     8.3      81\n",
              "9     2.7      25\n",
              "10    7.7      85\n",
              "11    5.9      62\n",
              "12    4.5      41\n",
              "13    3.3      42\n",
              "14    1.1      17\n",
              "15    8.9      95\n",
              "16    2.5      30\n",
              "17    1.9      24\n",
              "18    6.1      67\n",
              "19    7.4      69\n",
              "20    2.7      30\n",
              "21    4.8      54\n",
              "22    3.8      35\n",
              "23    6.9      76\n",
              "24    7.8      86"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 1
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Avh401TI11sH",
        "colab_type": "code",
        "outputId": "9480acb7-7f59-4664-e9b6-aca28184a8b6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "source": [
        "x=[2.5,5.1,3.2,8.5,3.5,1.5,9.2,5.5,8.3,2.7,7.7,5.9,4.5,3.3,1.1,8.9,2.5,1.9,6.1,7.4,2.7,4.8,3.8,6.9,7.8] \n",
        "y=[21,47,27,75,30,20,88,60,81,25,85,62,41,42,17,95,30,24,67,69,30,54,35,76,86]\n",
        "plt.scatter(x,y,s=20)\n",
        "plt.xlabel('x')\n",
        "plt.ylabel('y')\n",
        "plt.show()"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nIwHpSnMJUgAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_LSp2jKt96uj",
        "colab_type": "code",
        "outputId": "f4bbd8d5-4b45-44a8-ffff-7e09afa6d73f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 476
        }
      },
      "source": [
        "#from my_linear_regression import MyLinearRegression\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Importing the dataset\n",
        "\n",
        "X = studentscores.iloc[:, :-1].values\n",
        "y = studentscores.iloc[:, -1].values\n",
        "X,y"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([[2.5],\n",
              "        [5.1],\n",
              "        [3.2],\n",
              "        [8.5],\n",
              "        [3.5],\n",
              "        [1.5],\n",
              "        [9.2],\n",
              "        [5.5],\n",
              "        [8.3],\n",
              "        [2.7],\n",
              "        [7.7],\n",
              "        [5.9],\n",
              "        [4.5],\n",
              "        [3.3],\n",
              "        [1.1],\n",
              "        [8.9],\n",
              "        [2.5],\n",
              "        [1.9],\n",
              "        [6.1],\n",
              "        [7.4],\n",
              "        [2.7],\n",
              "        [4.8],\n",
              "        [3.8],\n",
              "        [6.9],\n",
              "        [7.8]]),\n",
              " array([21, 47, 27, 75, 30, 20, 88, 60, 81, 25, 85, 62, 41, 42, 17, 95, 30,\n",
              "        24, 67, 69, 30, 54, 35, 76, 86]))"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PvfKE_WT96un",
        "colab_type": "code",
        "outputId": "a0fd6b31-64e9-4bc4-d61f-e723fc7323b8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 459
        }
      },
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=1/3, random_state=0)\n",
        "\n",
        "# Fitting Simple Linear Regression to the Training set\n",
        "regressor = MyLinearRegression()\n",
        "regressor.train(X_train, y_train)\n",
        "print('Weight: ' + str(regressor.weight) + ' Bias: ' + str(regressor.bias))\n",
        "\n",
        "# Predicting the Test set results\n",
        "y_pred = regressor.predict(X_test)\n"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Iteration: 0\t Weight: [4.82155132]\t Bias: [0.7549415]\t Cost: 466.7777974634124\n",
            "Iteration: 1\t Weight: [7.2780746]\t Bias: [1.13905075]\t Cost: 133.25942113305584\n",
            "Iteration: 2\t Weight: [8.53215453]\t Bias: [1.33636823]\t Cost: 46.3115797186688\n",
            "Iteration: 3\t Weight: [9.17228447]\t Bias: [1.43830947]\t Cost: 23.644143584930244\n",
            "Iteration: 4\t Weight: [9.49894075]\t Bias: [1.49154993]\t Cost: 17.73447131288379\n",
            "Iteration: 5\t Weight: [9.6655423]\t Bias: [1.51992145]\t Cost: 16.193513352457195\n",
            "Iteration: 6\t Weight: [9.75042265]\t Bias: [1.53559225]\t Cost: 15.791471349472966\n",
            "Iteration: 7\t Weight: [9.79357778]\t Bias: [1.54477525]\t Cost: 15.686343870251939\n",
            "Iteration: 8\t Weight: [9.81542908]\t Bias: [1.55064268]\t Cost: 15.658622959225372\n",
            "Iteration: 9\t Weight: [9.82640341]\t Bias: [1.55481424]\t Cost: 15.65108336042746\n",
            "Iteration: 10\t Weight: [9.83182456]\t Bias: [1.55811695]\t Cost: 15.648806565730254\n",
            "Iteration: 11\t Weight: [9.83441082]\t Bias: [1.56097307]\t Cost: 15.647903344444783\n",
            "Iteration: 12\t Weight: [9.83555006]\t Bias: [1.56359821]\t Cost: 15.647359774628287\n",
            "Iteration: 13\t Weight: [9.83595095]\t Bias: [1.56610246]\t Cost: 15.646911521131745\n",
            "Iteration: 14\t Weight: [9.8359753]\t Bias: [1.56854205]\t Cost: 15.646489664497327\n",
            "Iteration: 15\t Weight: [9.83580784]\t Bias: [1.57094568]\t Cost: 15.646076229753671\n",
            "Iteration: 16\t Weight: [9.83554291]\t Bias: [1.57332804]\t Cost: 15.645666523086062\n",
            "Iteration: 17\t Weight: [9.83522867]\t Bias: [1.5756966]\t Cost: 15.645259313087786\n",
            "Iteration: 18\t Weight: [9.8348897]\t Bias: [1.57805521]\t Cost: 15.644854271033479\n",
            "Iteration: 19\t Weight: [9.83453855]\t Bias: [1.58040583]\t Cost: 15.644451303563713\n",
            "Iteration: 20\t Weight: [9.83418164]\t Bias: [1.58274948]\t Cost: 15.64405037871719\n",
            "Iteration: 21\t Weight: [9.83382223]\t Bias: [1.58508667]\t Cost: 15.643651480577384\n",
            "Iteration: 22\t Weight: [9.833462]\t Bias: [1.58741769]\t Cost: 15.643254597448987\n",
            "Iteration: 23\t Weight: [9.83310179]\t Bias: [1.58974267]\t Cost: 15.642859718775231\n",
            "Iteration: 24\t Weight: [9.83274204]\t Bias: [1.59206171]\t Cost: 15.642466834334062\n",
            "Weight: [9.83274204] Bias: [1.59206171]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "s84WUuxwJ8fN",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "466.7777974634124\n",
        "Iteration: 1\t Weight: [7.2780746]\t Bias: [1.13905075]\t Cost: 133.25942113305584\n",
        "Iteration: 2\t Weight: [8.53215453]\t Bias: [1.33636823]\t Cost: 46.3115797186688\n",
        "Iteration: 3\t Weight: [9.17228447]\t Bias: [1.43830947]\t Cost: 23.644143584930244\n",
        "Iteration: 4\t Weight: [9.49894075]\t Bias: [1.49154993]\t Cost: 17.73447131288379\n",
        "Iteration: 5\t Weight: [9.6655423]\t Bias: [1.51992145]\t Cost: 16.193513352457195\n",
        "Iteration: 6\t Weight: [9.75042265]\t Bias: [1.53559225]\t Cost: 15.791471349472966\n",
        "Iteration: 7\t Weight: [9.79357778]\t Bias: [1.54477525]\t Cost: 15.686343870251939\n",
        "Iteration: 8\t Weight: [9.81542908]\t Bias: [1.55064268]\t Cost: 15.658622959225372\n",
        "Iteration: 9\t Weight: [9.82640341]\t Bias: [1.55481424]\t Cost: 15.65108336042746\n",
        "Iteration: 10\t Weight: [9.83182456]\t Bias: [1.55811695]\t Cost: 15.648806565730254\n",
        "Iteration: 11\t Weight: [9.83441082]\t Bias: [1.56097307]\t Cost: 15.647903344444783\n",
        "Iteration: 12\t Weight: [9.83555006]\t Bias: [1.56359821]\t Cost: 15.647359774628287\n",
        "Iteration: 13\t Weight: [9.83595095]\t Bias: [1.56610246]\t Cost: 15.646911521131745\n",
        "Iteration: 14\t Weight: [9.8359753]\t Bias: [1.56854205]\t Cost: 15.646489664497327\n",
        "Iteration: 15\t Weight: [9.83580784]\t Bias: [1.57094568]\t Cost: 15.646076229753671\n",
        "Iteration: 16\t Weight: [9.83554291]\t Bias: [1.57332804]\t Cost: 15.645666523086062\n",
        "Iteration: 17\t Weight: [9.83522867]\t Bias: [1.5756966]\t Cost: 15.645259313087786\n",
        "Iteration: 18\t Weight: [9.8348897]\t Bias: [1.57805521]\t Cost: 15.644854271033479\n",
        "Iteration: 19\t Weight: [9.83453855]\t Bias: [1.58040583]\t Cost: 15.644451303563713\n",
        "Iteration: 20\t Weight: [9.83418164]\t Bias: [1.58274948]\t Cost: 15.64405037871719\n",
        "Iteration: 21\t Weight: [9.83382223]\t Bias: [1.58508667]\t Cost: 15.643651480577384\n",
        "Iteration: 22\t Weight: [9.833462]\t Bias: [1.58741769]\t Cost: 15.643254597448987\n",
        "Iteration: 23\t Weight: [9.83310179]\t Bias: [1.58974267]\t Cost: 15.642859718775231\n",
        "Iteration: 24\t Weight: [9.83274204]\t Bias: [1.59206171]\t Cost: 15.642466834334062"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Qw0Vfxf996uw",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "outputId": "9f550066-8310-478c-c8b7-3f4ef2262f95"
      },
      "source": [
        "y=[0,1,2,3,4,5,6,7,8] \n",
        "x=[133.2594,46.3115,23.64414,17.7344,16.19351,15.7914,15.686,15.658,15.651]\n",
        "plt.plot(x,y,linewidth=2.0)\n",
        "plt.xlabel('x')\n",
        "plt.ylabel('y')\n",
        "plt.show()"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nIiIx9f8BGplD12RMRegAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    }
  ]
}